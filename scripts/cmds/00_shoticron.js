function formatFont(text) {
  const fontMapping = {
    a: "ùöä", b: "ùöã", c: "ùöå", d: "ùöç", e: "ùöé", f: "ùöè", g: "ùöê", h: "ùöë", i: "ùöí", j: "ùöì", k: "ùöî", l: "ùöï", m: "ùöñ",
    n: "ùöó", o: "ùöò", p: "ùöô", q: "ùöö", r: "ùöõ", s: "ùöú", t: "ùöù", u: "ùöû", v: "ùöü", w: "ùö†", x: "ùö°", y: "ùö¢", z: "ùö£",
    A: "ùô∞", B: "ùô±", C: "ùô≤", D: "ùô≥", E: "ùô¥", F: "ùôµ", G: "ùô∂", H: "ùô∑", I: "ùô∏", J: "ùôπ", K: "ùô∫", L: "ùôª", M: "ùôº",
    N: "ùôΩ", O: "ùôæ", P: "ùôø", Q: "ùöÄ", R: "ùöÅ", S: "ùöÇ", T: "ùöÉ", U: "ùöÑ", V: "ùöÖ", W: "ùöÜ", X: "ùöá", Y: "ùöà", Z: "ùöâ"
  };

  let formattedText = "";
  for (const char of text) {
    if (char in fontMapping) {
      formattedText += fontMapping[char];
    } else {
      formattedText += char;
    }
  }

  return formattedText;
}
const cron = require('node-cron');
const axios = require("axios");
const request = require('request');
const fs = require("fs");

const activeThreads = {};

module.exports = {
	config: {
		name: "shoticron2",
		author: "who is tokodori", // Convert To Goat By Tokodori
		role: 2,
		description: {
      en: "ùó¶ùó≤ùóªùó± ùòÅùó∂ùó∏ùòÅùóºùó∏ ùòÉùó∂ùó±ùó≤ùóº ùó≤ùòÉùó≤ùóøùòÜ 30 ùó∫ùó∂ùóªùòÇùòÅùó≤ùòÄ"
    },
		category: "ùó†ùóòùóóùóúùóî",
		guide: "{pn}"
	},
	onStart: async function({api, event, input}) {
		const args = event.body.split(" ");
		const threadID = event.threadID;

		if (args[1] === "on") {
			if (!activeThreads[threadID]) {
				activeThreads[threadID] = true;
				api.sendMessage(formatFont(`‚úÖ | Automatic sending of videos is now enable.`, event.threadID));
				cron.schedule('*/30 * * * *', async () => {
					try {
						if (activeThreads[threadID]) {
							let response = await axios.post(
								"https://api--v1-shoti.vercel.app/api/v1/get",
								{
									apikey: "$shoti-1hfdaljvdsfauofg7j",
								}
							);
							var file = fs.createWriteStream(__dirname + "/cache/shoti.mp4");
							const userInfo = response.data.data.user;
							const username = userInfo.username;
							const nickname = userInfo.nickname;
							const tid = event.threadID;
							var rqs = request(encodeURI(response.data.data.url));
							rqs.pipe(file);
							file.on('finish', () => {
								api.sendMessage(
									{
										body: formatFont(`Username: @${username}\nNickname: ${nickname}\nTid: ${tid}`),
										attachment: fs.createReadStream(__dirname + '/cache/shoti.mp4')
									}, threadID, (error, info) => {
										if (!error) {
											fs.unlinkSync(__dirname + '/cache/shoti.mp4');
										}
									});
							});
						}
					} catch (error) {
						console.error('Error:', error);
					}
				});
			} else {
				api.sendMessage("‚úÖ | Automatic sending of videos is already ON in this thread.", threadID);
			}
		} else if (args[1] === "off") {
			if (activeThreads[threadID]) {
				activeThreads[threadID] = false;
				api.sendMessage(formatFont(`‚ùé | Automatic sending of videos is now disable.`, threadID));
			} else {
				api.sendMessage(formatFont("‚ùé | Automatic sending of videos is already OFF in this thread.", threadID));
			}
		}
	}
};